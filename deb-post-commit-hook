#!/usr/bin/env python

# deb-post-commit-hook
# ----------------------------------------------------------------------------
# Copyright (c) 2004 Stephen Hansen 
# Copyright (c) 2006-2007 John Goerzen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included in
#   all copies or substantial portions of the Software. 
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
# ----------------------------------------------------------------------------

# This Debian post-commit hook script is meant to interface to the
# Trac (http://www.edgewall.com/products/trac/) issue tracking/wiki/etc 
# system.
# 
# It should be called from the 'post-commit' hook, such as
# via:
#
# REPOS="$1"
# REV="$2"
# LOG=`/usr/bin/svnlook log -r $REV $REPOS`
# AUTHOR=`/usr/bin/svnlook author -r $REV $REPOS`
# TRAC_ENV='/somewhere/trac/project/'
# TRAC_URL='http://trac.mysite.com/project/'
#
# /usr/bin/python /usr/local/src/trac/contrib/deb-post-commit-hook \
#  -r "$REV"       \
#  -u "$AUTHOR"    \
#  -m "$LOG"       \
#  -s "$TRAC_URL"
#
# It searches commit messages for text in the form of:
#   command deb#1
#   command deb#1, deb#2
#   command deb#1 & deb#2 
#   command deb#1 and deb#2
#
# You can have more then one command in a message. The following commands
# are supported. There is more then one spelling for each command, to make
# this as user-friendly as possible.
#
#   closes, fixes
#     The specified issue numbers are closed with the contents of this
#     commit message being added to it. 
#   references, refs, addresses, re 
#     The specified issue numbers are left in their current status, but 
#     the contents of this commit message are added to their notes. 
#
# A fairly complicated example of what you can do is with a commit message
# of:
#
#    Changed blah and foo to do this or that. Fixes #10 and #12, and refs #12.
#
# This will close #10 and #12, and add a note to #12.

import re
import os
import sys
import time 
from email.MIMEText import MIMEText
import smtplib

try:
    from optparse import OptionParser
except ImportError:
    try:
        from optik import OptionParser
    except ImportError:
        raise ImportError, 'Requires Python 2.3 or the Optik option parsing library.'

parser = OptionParser()
parser.add_option('-e', '--require-envelope', dest='env', default='',
                  help='Require commands to be enclosed in an envelope. If -e[], '
                       'then commands must be in the form of [closes #4]. Must '
                       'be two characters.')
parser.add_option('-r', '--revision', dest='rev',
                  help='Repository revision number.')
parser.add_option('-u', '--user', dest='user',
                  help='The user who is responsible for this action')
parser.add_option('-m', '--msg', dest='msg',
                  help='The log message to search.')
parser.add_option('-c', '--encoding', dest='encoding',
                  help='The encoding used by the log message.')
parser.add_option('-s', '--sitebase', dest='base',
                  help='The base domain to the project\'s BTS')
parser.add_option('-U', '--url', dest='url',
                  help='URL where this patch/diff may be viewed')
parser.add_option('-f', '--logfile', dest='logfile',
                  help='Add this instead of -m to the message')
parser.add_option('-F', '--fromaddr', dest='fromaddr',
                  help='From address for sent mail')

(options, args) = parser.parse_args(sys.argv[1:])

if options.env:
    leftEnv = '\\' + options.env[0]
    rghtEnv = '\\' + options.env[1]
else:
    leftEnv = ''
    rghtEnv = ''

commandPattern = re.compile(leftEnv + r'(?P<action>[A-Za-z]*).?(?P<ticket>deb#[0-9]+(?:(?:[, &]*|[ ]?and[ ]?)deb#[0-9]+)*)' + rghtEnv)
ticketPattern = re.compile(r'deb#([0-9]*)')

class CommitHook:
    _supported_cmds = {'close':      '_cmdClose',
                       'closed':     '_cmdClose',
                       'closes':     '_cmdClose',
                       'fix':        '_cmdClose',
                       'fixed':      '_cmdClose',
                       'fixes':      '_cmdClose',
                       'addresses':  '_cmdRefs',
                       're':         '_cmdRefs',
                       'references': '_cmdRefs',
                       'refs':       '_cmdRefs',
                       'see':        '_cmdRefs'}

    def __init__(self, author=options.user,
                 rev=options.rev, msg=options.msg, url=options.url,
                 encoding=options.encoding, base=options.base, logfile=options.logfile,
                 fromaddr=options.fromaddr):
        self.author = author
        self.rev = rev
        self.msg = msg
        self.now = int(time.time()) 
        self.base = base
        self.url = url
        self.logfile = logfile
        if fromaddr:
            self.fromaddr = fromaddr
        else:
            self.fromaddr = author

        cmdGroups = commandPattern.findall(msg)

        tickets = {}
        for cmd, tkts in cmdGroups:
            funcname = CommitHook._supported_cmds.get(cmd.lower(), '')
            if funcname:
                for tkt_id in ticketPattern.findall(tkts):
                    func = getattr(self, funcname)
                    tickets.setdefault(tkt_id, []).append(func)

        for tkt_id, cmds in tickets.iteritems():
            try:
                for cmd in cmds:
                    cmd(tkt_id)

            except Exception, e:
                # import traceback
                # traceback.print_exc(file=sys.stderr)
                print>>sys.stderr, 'Unexpected error while processing ticket ' \
                                   'ID %s: %s' % (tkt_id, e)
            

    def _cmdClose(self, ticket):
        msg = self._getMessage(ticket)
        msg['Cc'] = '<control@%s>' % self.base

        message = "tags %s pending\nthanks\n\n" % ticket

        msg.set_payload(message + msg.get_payload())
        p = os.popen("/usr/sbin/sendmail -t", "w")
        p.write(msg.as_string())
        status = p.close()

    def _cmdRefs(self, ticket):
        msg = self._getMessage(ticket)
        p = os.popen("/usr/sbin/sendmail -t", "w")
        p.write(msg.as_string())
        status = p.close()

    def _getMessage(self, ticket):
        message = "A commit relevant to this bug has occurred.\n\n"
        message += "  Revision: %s\n" % self.rev
        if self.url:
            message += "  More details, including a diff, are available at:\n"
            message += "    %s\n" % self.url
        message += "\n\n"
        if self.logfile:
            fd = open(self.logfile)
            message += fd.read()
            fd.close()
        else:
            message += self.msg

        msg = MIMEText(message)
        msg['To'] = '<%s@%s>' % (ticket, self.base)
        msg['Subject'] = 'New commit'
        msg['From'] = self.fromaddr

        return msg

if __name__ == "__main__":
    if len(sys.argv) < 5:
        print "For usage: %s --help" % (sys.argv[0])
    else:
        CommitHook()
